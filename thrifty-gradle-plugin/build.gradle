/*
 * Thrifty
 *
 * Copyright (c) Microsoft Corporation
 * Copyright (c) GAHOJIN, Inc.
 *
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED ON AN  *AS IS* BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING
 * WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE,
 * FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
 *
 * See the Apache Version 2.0 License for specific language governing permissions and limitations under the License.
 */
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'java-gradle-plugin'
    id 'java-library'
    id 'idea'
    id 'signing'
    alias libs.plugins.detekt
    alias libs.plugins.kotlin.jvm
    alias libs.plugins.kotlinx.kover
    alias libs.plugins.gradle.plugin.publish
    alias libs.plugins.maven.publish
}

java {
    sourceCompatibility = Build.jvmTarget
    targetCompatibility = Build.jvmTarget
}

kotlin {
    compilerOptions {
        jvmTarget = JvmTarget.fromTarget(Build.jvmTarget.toString())
        freeCompilerArgs.add('-Xjvm-default=all')
    }
}

signing {
    def versionName = (String) project.findProperty("VERSION_NAME")
    if (!versionName?.endsWith("-SNAPSHOT")) {
        useGpgCmd()
    }
    sign(publishing.publications)
}

mavenPublishing {
    publishToMavenCentral()
    signAllPublications()
}

gradlePlugin {
    website = 'https://github.com/gahojin/thrifty'
    vcsUrl = 'https://github.com/gahojin/thrifty.git'

    plugins {
        thriftyPlugin {
            id = 'jp.co.gahojin.thrifty'
            displayName = 'Thrifty Gradle Plugin'
            description = 'Generates Java and/or Kotlin sources from .thrift files'
            implementationClass = 'jp.co.gahojin.thrifty.gradle.ThriftyGradlePlugin'
            tags.set(['thrift', 'code-generation', 'thrifty'])
        }
    }
}

def versionTask = tasks.register("generateVersionProps", WriteProperties) {
    def generatedResourcesDir = project.layout.buildDirectory.dir(["generated", "sources", "thrifty", "src", "main", "resources"].join(File.separator))
    destinationFile = generatedResourcesDir.map {dir -> dir.file("thrifty-version.properties") }

    property("THRIFTY_VERSION", VERSION_NAME)
    property("KOTLIN_VERSION", libs.versions.kotlin.asProvider().get())
}

processResources {
    from versionTask
}

clean {
    delete versionTask
}

dependencies {
    compileOnly gradleApi()

    compileOnly project(':thrifty-java-codegen')
    compileOnly project(':thrifty-kotlin-codegen')
    compileOnly project(':thrifty-schema')

    testImplementation libs.junit
    testImplementation libs.junit.platform.launcher
    testImplementation libs.kotest.assertions.core
}

def installLocal = tasks.register("installForTesting") {
    dependsOn rootProject.subprojects
            .collect {it.tasks.matching { task -> task.name == "publishToMavenLocal" } }
}

tasks.withType(Test).configureEach {
    dependsOn installLocal

    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        events("passed", "skipped", "failed")
    }
}
