import org.jetbrains.kotlin.gradle.dsl.JvmTarget

/*
 * Thrifty
 *
 * Copyright (c) Microsoft Corporation
 * Copyright (c) GAHOJIN, Inc.
 *
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED ON AN  *AS IS* BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING
 * WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE,
 * FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
 *
 * See the Apache Version 2.0 License for specific language governing permissions and limitations under the License.
 */

plugins {
    id 'application'
    id 'idea'
    alias libs.plugins.detekt
    alias libs.plugins.kotlin.jvm
    alias libs.plugins.kotlinx.kover
    alias libs.plugins.shadow
}

dependencies {
    implementation project(':thrifty-compiler')

    testImplementation project(':thrifty-runtime')
    testImplementation project(':thrifty-test-server')
    testImplementation libs.guava

    testImplementation libs.assertj
    testImplementation libs.kotlin.stdlib
    testImplementation libs.junit
    testImplementation libs.junit.platform.launcher
    testImplementation libs.kotest.assertions.core
    testImplementation libs.ktor.client.cio

    implementation libs.apache.thrift
}

sourceSets {
    test {
        java.srcDirs += [
                'build/generated-src/thrifty-java/java',
                'build/generated-src/thrifty-kotlin/kotlin',
                'build/generated-src/thrifty-kotlin-coro/kotlin'
        ]
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

kotlin {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_1_8
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        events("passed", "skipped", "failed")
    }
}

shadowJar {
    mergeServiceFiles {
        exclude 'META-INF/services/*'
    }
}

application {
    mainClass = 'jp.co.gahojin.thrifty.compiler.ThriftyCompiler'
}

def compileTestThrift = tasks.register("compileTestThrift", JavaExec) { t ->
    t.inputs.file("$projectDir/ClientThriftTest.thrift")
    t.outputs.dir("$projectDir/build/generated-src/thrifty-java/java")

    t.outputs.cacheIf("This task is always cacheable based on its inputs") { true }

    t.classpath shadowJar.archiveFile

    args = [
            "--out=$projectDir/build/generated-src/thrifty-java/java",
            "--lang=java",
            "$projectDir/ClientThriftTest.thrift"]
}


def kompileTestThrift = tasks.register("kompileTestThrift", JavaExec) { t ->
    t.inputs.file("$projectDir/ClientThriftTest.thrift")
    t.outputs.dir("$projectDir/build/generated-src/thrifty-kotlin/kotlin")

    t.outputs.cacheIf("This task is always cacheable based on its inputs") { true }

    t.classpath shadowJar.archiveFile

    args = [
            "--out=$projectDir/build/generated-src/thrifty-kotlin/kotlin",
            "--map-type=java.util.LinkedHashMap",
            "--set-type=java.util.LinkedHashSet",
            "--list-type=java.util.ArrayList",
            "--experimental-kt-generate-server",
            "$projectDir/ClientThriftTest.thrift"
    ]
}

def kompileCoroutineTestThrift = tasks.register("kompileCoroutineTestThrift", JavaExec) { t ->
    t.inputs.file("$projectDir/CoroutineClientTest.thrift")
    t.outputs.dir("$projectDir/build/generated-src/thrifty-kotlin-coro/kotlin")

    t.outputs.cacheIf("This task is always cacheable based on its inputs") { true }

    t.classpath shadowJar.archiveFile

    args = [
            "--out=$projectDir/build/generated-src/thrifty-kotlin-coro/kotlin",
            "--kt-file-per-type",
            "--kt-emit-jvmname",
            "$projectDir/CoroutineClientTest.thrift"
    ]
}

def cleanTestCode = tasks.register("cleanTestCode", Delete) { t ->
    t.delete compileTestThrift
    t.delete kompileTestThrift
    t.delete kompileCoroutineTestThrift
}

compileTestKotlin {
    dependsOn compileTestThrift
    dependsOn kompileTestThrift
    dependsOn kompileCoroutineTestThrift
}

compileTestJava {
    dependsOn compileTestThrift
    dependsOn kompileTestThrift
}

clean {
    dependsOn cleanTestCode
}
